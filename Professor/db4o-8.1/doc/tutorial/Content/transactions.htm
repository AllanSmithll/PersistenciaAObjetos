<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="3" MadCap:lastHeight="188" MadCap:lastWidth="625" MadCap:disableMasterStylesheet="true" MadCap:tocPath="" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Transactions</title>
        <link href="SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="SkinSupport/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../index_CSH.html#transactions.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><span class="MCBreadcrumbs">Commit and Rollback</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        <h1>Transactions</h1>
        <p>db4o has ACID properties and supports transactions. Now we take a look at db4o's transaction support. (<a href="javascript:void(0);" class="MCToggler" onclick="FMCToggler( this ); return false;" MadCap:targets="domainModel"><img style="border: none;margin-right: 5px;" src="SkinSupport/DropDownClosed.gif" MadCap:altsrc="SkinSupport/DropDownOpen.gif" class="MCTogglerIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( 'SkinSupport/DropDownOpen.gif' ); }" />Click here</a> to see the example domain model classes) <![CDATA[ ]]></p>
        <div MadCap:targetName="domainModel" style="display: none;">
            <div class="codesnippet" MadCap:conditions="Primary.Java">
                <pre class="prettyprint" xml:space="preserve">@TransparentPersisted
<span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">class</span> Car {
    <span style="color:Blue;">private</span> String carName;

    <span style="color:Blue;">public</span> Car(String carName) {
        <span style="color:Blue;">this</span>.carName = carName;
    }

    <span style="color:Blue;">public</span> String getCarName() {
        <span style="color:Blue;">return</span> carName;
    }
}</pre>
                <div class="codesnippet-meta">Car.java: Domain model for cars
			<div class="codedownload"><a href="CodeExamples/transactions/Example-tutorial-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
            </div>
            <div class="codesnippet" MadCap:conditions="Primary.Java">
                <pre class="prettyprint" xml:space="preserve">@TransparentPersisted
<span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">class</span> Driver {
    <span style="color:Blue;">private</span> String name;
    <span style="color:Blue;">private</span> Car mostLovedCar;

    <span style="color:Blue;">public</span> Driver(String name) {
        <span style="color:Blue;">this</span>.name = name;
    }

    <span style="color:Blue;">public</span> Driver(String name, Car mostLovedCar) {
        <span style="color:Blue;">this</span>.name = name;
        <span style="color:Blue;">this</span>.mostLovedCar = mostLovedCar;
    }

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">void</span> setName(String name) {
        <span style="color:Blue;">this</span>.name = name;
    }

    <span style="color:Blue;">public</span> String getName() {
        <span style="color:Blue;">return</span> name;
    }

    <span style="color:Blue;">public</span> Car getMostLovedCar() {
        <span style="color:Blue;">return</span> mostLovedCar;
    }
}</pre>
                <div class="codesnippet-meta">Driver.java: Domain model for drivers
			<div class="codedownload"><a href="CodeExamples/transactions/Example-tutorial-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
            </div>
        </div>
        <h2><a name="CommitRollback"></a>Commit and Rollback</h2>
        <p>db4o starts a transaction as soon as you open an object container and implicitly commits it when you close the object container. In between we can control the transaction explicitly by calling the commit or rollback method.  After the commit everything is persisted and another transaction is started.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">container.commit();</pre>
            <div class="codesnippet-meta">Transactions.java: Committing changes
			<div class="codedownload"><a href="CodeExamples/transactions/Example-tutorial-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>The same applies to rollbacks. We can rollback the transaction any time. After a rollback the next transaction is started.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">container.rollback();</pre>
            <div class="codesnippet-meta">Transactions.java: Rollback changes
			<div class="codedownload"><a href="CodeExamples/transactions/Example-tutorial-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="ObjectState"></a>Object State after Rollback</h2>
        <p>What happens to objects in memory when we rollback a transaction? By default the objects in memory keep their state. If you want to rollback the objects in memory you need to reload them.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Driver driver = queryForDriver(container);
driver.setName(<span style="color:#A31515;">"New Name"</span>);
System.out.println(<span style="color:#A31515;">"Name before rollback "</span> + driver.getName());
container.rollback();
<span style="color:Green;">// Without transparent persistence objects keep the state in memory</span>
System.out.println(<span style="color:#A31515;">"Name after rollback "</span> + driver.getName());
<span style="color:Green;">// After refreshing the object is has the state like in the database</span>
container.ext().refresh(driver, Integer.MAX_VALUE);
System.out.println(<span style="color:#A31515;">"Name after rollback "</span> + driver.getName());</pre>
            <div class="codesnippet-meta">Transactions.java: Without transparent persistence objects in memory aren't rolled back
			<div class="codedownload"><a href="CodeExamples/transactions/Example-tutorial-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>With Transparent Persistence</h3>
        <p>With transparent activation we can use a rollback strategy. That way we can rollback the state of the objects in memory.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
configuration.common().add(<span style="color:Blue;">new</span> TransparentPersistenceSupport(<span style="color:Blue;">new</span> DeactivatingRollbackStrategy()));</pre>
            <div class="codesnippet-meta">Transactions.java: Rollback strategy for the transaction
			<div class="codedownload"><a href="CodeExamples/transactions/Example-tutorial-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Driver driver = queryForDriver(container);
driver.setName(<span style="color:#A31515;">"New Name"</span>);
System.out.println(<span style="color:#A31515;">"Name before rollback "</span> + driver.getName());
container.rollback();
<span style="color:Green;">// Thanks to transparent persistence with the rollback strategy</span>
<span style="color:Green;">// the object state is rolled back</span>
System.out.println(<span style="color:#A31515;">"Name after rollback "</span> + driver.getName());</pre>
            <div class="codesnippet-meta">Transactions.java: Transparent persistence rolls back objects in memory
			<div class="codedownload"><a href="CodeExamples/transactions/Example-tutorial-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="MultipleTx"></a>Multiple Transactions</h2>
        <p>For more complex applications we can use multiple transactions. For that we need to create multiple object containers, each having its own transaction. </p>
        <p>When we have multiple object containers, an object always needs to be loaded and stored in the same object container.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">ObjectContainer container = rootContainer.ext().openSession();
<span style="color:Blue;">try</span>{
    <span style="color:Green;">// We do our operations in this transaction</span>
} <span style="color:Blue;">finally</span> {
    container.close();
}</pre>
            <div class="codesnippet-meta">Transactions.java: Opening a new transaction
			<div class="codedownload"><a href="CodeExamples/transactions/Example-tutorial-transactions-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div id="footer" MadCap:conditions="Primary.Online">
            <p align="center">Do you have any questions, suggestions or feedback? 
			Ask your questions in the <a href="http://community.versant.com/Forums.aspx" target="_top">db4o forums</a>. 
			Join the <a href="http://community.versant.com" target="_top">db4o community</a> for additional resources and news.
			<br /><br /><a href="http://www.db4o.com/" target="_top">www.db4o.com</a></p>
        </div>
        <script src="Resources/Code/jquery.min.js">
        </script>
        <script src="Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */ 
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>