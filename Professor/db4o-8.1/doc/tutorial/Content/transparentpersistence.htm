<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="3" MadCap:lastHeight="188" MadCap:lastWidth="625" MadCap:disableMasterStylesheet="true" MadCap:tocPath="" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Transparent Persistence</title>
        <link href="SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="SkinSupport/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../index_CSH.html#transparentpersistence.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><span class="MCBreadcrumbs">Enhance Persistent Classes</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        <h1>Transparent Persistence</h1>
        <p>In the previous topics we've seen that <a href="activation.htm">activation</a> and the <a href="update-concept.htm">update depth</a> can be annoying and cause unexpected errors. That's why we want to get rid of it. That's where transparent persistence comes to our rescue. It manages the activation and updating of our updates. Let's get started.</p>
        <h2><a name="Enhance"></a>Enhance Persistent Classes</h2>
        <p>The first step for transparent persistence it to enhance the persisted classes. For that we introduce an <span class="PrimaryAnnotation">Annotation</span>:</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">@Retention(RetentionPolicy.RUNTIME)
@Documented
@Target(ElementType.TYPE)
<span style="color:Blue;">public</span> @<span style="color:Blue;">interface</span> TransparentPersisted {
}</pre>
            <div class="codesnippet-meta">TransparentPersisted.java: Annotation to mark persisted classes
			<div class="codedownload"><a href="CodeExamples/transparentpersistence/Example-tutorial-transparentpersistence-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>After that we can mark the persistent classes with the <span class="PrimaryAnnotation">Annotation</span>. (<a href="javascript:void(0);" class="MCToggler" onclick="FMCToggler( this ); return false;" MadCap:targets="domainModel"><img style="border: none;margin-right: 5px;" src="SkinSupport/DropDownClosed.gif" MadCap:altsrc="SkinSupport/DropDownOpen.gif" class="MCTogglerIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( 'SkinSupport/DropDownOpen.gif' ); }" />Click here</a> to see the example domain model classes)</p>
        <div MadCap:targetName="domainModel" style="display: none;">
            <div class="codesnippet" MadCap:conditions="Primary.Java">
                <pre class="prettyprint" xml:space="preserve">@TransparentPersisted
<span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">class</span> Car {
    <span style="color:Blue;">private</span> String carName;

    <span style="color:Blue;">public</span> Car(String carName) {
        <span style="color:Blue;">this</span>.carName = carName;
    }

    <span style="color:Blue;">public</span> String getCarName() {
        <span style="color:Blue;">return</span> carName;
    }

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">void</span> setCarName(String carName) {
        <span style="color:Blue;">this</span>.carName = carName;
    }
}</pre>
                <div class="codesnippet-meta">Car.java: Domain model for cars
			<div class="codedownload"><a href="CodeExamples/transparentpersistence/Example-tutorial-transparentpersistence-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
            </div>
            <div class="codesnippet" MadCap:conditions="Primary.Java">
                <pre class="prettyprint" xml:space="preserve">@TransparentPersisted
<span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">class</span> Driver {
    <span style="color:Blue;">private</span> String name;
    <span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">final</span> List&lt;Car&gt; ownedCars = <span style="color:Blue;">new</span> ArrayList&lt;Car&gt;();
    <span style="color:Blue;">private</span> Car mostLovedCar;

    <span style="color:Blue;">public</span> Driver(String name) {
        <span style="color:Blue;">this</span>.name = name;
    }

    <span style="color:Blue;">public</span> Driver(String name, Car mostLovedCar) {
        <span style="color:Blue;">this</span>.name = name;
        <span style="color:Blue;">this</span>.mostLovedCar = mostLovedCar;
    }

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">void</span> setName(String name) {
        <span style="color:Blue;">this</span>.name = name;
    }

    <span style="color:Blue;">public</span> String getName() {
        <span style="color:Blue;">return</span> name;
    }

    <span style="color:Blue;">public</span> Car getMostLovedCar() {
        <span style="color:Blue;">return</span> mostLovedCar;
    }
    <span style="color:Blue;">public</span> Iterable&lt;Car&gt; getOwnedCars() {
        <span style="color:Blue;">return</span> ownedCars;
    }

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">boolean</span> addOwnedCar(Car car) {
        <span style="color:Blue;">return</span> ownedCars.add(car);
    }
}</pre>
                <div class="codesnippet-meta">Driver.java: Domain model for drivers
			<div class="codedownload"><a href="CodeExamples/transparentpersistence/Example-tutorial-transparentpersistence-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
            </div>
        </div>
        <div MadCap:conditions="Primary.Java">
            <p>The next step it to create a class filter which reports all classes which should be enhanced. In our example we check for the presence of the annotation. In practice you can implement your own class filter as you like. </p>
            <div class="codesnippet" MadCap:conditions="Primary.Java">
                <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">final</span> <![CDATA[ ]]><span style="color:Blue;">class</span> AnnotationFilter <span style="color:Blue;">implements</span> ClassFilter{

    <span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">boolean</span> accept(Class&lt;?&gt; aClass) {
        <span style="color:Blue;">if</span>(<span style="color:Blue;">null</span>==aClass || aClass.equals(Object.<span style="color:Blue;">class</span>)){
            <span style="color:Blue;">return</span> <![CDATA[ ]]><span style="color:Blue;">false</span>;
        }
        <span style="color:Blue;">return</span> hasAnnotation(aClass)
                || accept(aClass.getSuperclass());
    }

    <span style="color:Blue;">private</span> <![CDATA[ ]]><span style="color:Blue;">boolean</span> hasAnnotation(Class&lt;?&gt; aClass) {
        <span style="color:Green;">// We compare by name, to be class-loader independent</span>
        Annotation[] annotations = aClass.getAnnotations();
        <span style="color:Blue;">for</span> (Annotation annotation : annotations) {
            <span style="color:Blue;">if</span>(annotation.annotationType().getName()
                    .equals(TransparentPersisted.<span style="color:Blue;">class</span>.getName())){
                <span style="color:Blue;">return</span> <![CDATA[ ]]><span style="color:Blue;">true</span>;
            }
        }
        <span style="color:Blue;">return</span> <![CDATA[ ]]><span style="color:Blue;">false</span>;
    }

}</pre>
                <div class="codesnippet-meta">AnnotationFilter.java: Build a filter
			<div class="codedownload"><a href="CodeExamples/transparentpersistence/Example-tutorial-transparentpersistence-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
            </div>
            <h3>Enhancing Classes Using Ant</h3>
            <p>The next step is to run the enhancement step when compiling the source. You can do this with a Ant task.</p>
            <div class="codesnippet" MadCap:conditions="">
                <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">&lt;</span><span style="color:#A31515;">target</span> <![CDATA[ ]]><span style="color:Red;">name</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">enhance</span><span style="color:Black;">"</span><span style="color:Blue;">&gt;</span>
    <span style="color:Green;">&lt;!-- Change these according to your project --&gt;</span>
    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">property</span> <![CDATA[ ]]><span style="color:Red;">name</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">target</span><span style="color:Black;">"</span> <![CDATA[ ]]><span style="color:Red;">value</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">./target/classes/</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>
    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">property</span> <![CDATA[ ]]><span style="color:Red;">name</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">libraries</span><span style="color:Black;">"</span> <![CDATA[ ]]><span style="color:Red;">value</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">./lib/</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>

    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">path</span> <![CDATA[ ]]><span style="color:Red;">id</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">project.classpath</span><span style="color:Black;">"</span><span style="color:Blue;">&gt;</span>
        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">pathelement</span> <![CDATA[ ]]><span style="color:Red;">path</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">${target}</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>
        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">fileset</span> <![CDATA[ ]]><span style="color:Red;">dir</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">${libraries}</span><span style="color:Black;">"</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">include</span> <![CDATA[ ]]><span style="color:Red;">name</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">*.jar</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>
        <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">fileset</span><span style="color:Blue;">&gt;</span>
    <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">path</span><span style="color:Blue;">&gt;</span>

    <span style="color:Green;">&lt;!-- We enhance with an additional Ant-run step. You can put this also in an extra file --&gt;</span>
    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">typedef</span> <![CDATA[ ]]><span style="color:Red;">resource</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">instrumentation-def.properties</span><span style="color:Black;">"</span>
             <span style="color:Red;">classpathref</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">project.classpath</span><span style="color:Black;">"</span>
             <span style="color:Red;">loaderRef</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">instrumentation.loader</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>

    <span style="color:Green;">&lt;!-- We filter by our annotation --&gt;</span>
    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">typedef</span> <![CDATA[ ]]><span style="color:Red;">name</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">annotation-filter</span><span style="color:Black;">"</span>
             <span style="color:Red;">classname</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">com.db4odoc.tutorial.transparentpersistence.AnnotationFilter</span><span style="color:Black;">"</span>
             <span style="color:Red;">classpathref</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">project.classpath</span><span style="color:Black;">"</span>
             <span style="color:Red;">loaderRef</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">instrumentation.loader</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>

    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">db4o-instrument</span> <![CDATA[ ]]><span style="color:Red;">classTargetDir</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">${target}</span><span style="color:Black;">"</span><span style="color:Blue;">&gt;</span>
        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">classpath</span> <![CDATA[ ]]><span style="color:Red;">refid</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">project.classpath</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>
        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">sources</span> <![CDATA[ ]]><span style="color:Red;">dir</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">${target}</span><span style="color:Black;">"</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">include</span> <![CDATA[ ]]><span style="color:Red;">name</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">**/*.class</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>
        <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">sources</span><span style="color:Blue;">&gt;</span>

        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">transparent-activation-step</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">annotation-filter</span><span style="color:Blue;">/&gt;</span>
        <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">transparent-activation-step</span><span style="color:Blue;">&gt;</span>
    <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">db4o-instrument</span><span style="color:Blue;">&gt;</span>
<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">target</span><span style="color:Blue;">&gt;</span></pre>
                <div class="codesnippet-meta">enhance.xml: Ant target for enhancing your classes after building them
			<div class="codedownload"><a href="CodeExamples/Example-java-db4o-tutorial-.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
            </div>
            <p>We can configure Eclipse to run the Ant build with each compile step. Right click on our project and choose 'Properties'. Then switch to 'Builders' and add a new one. The we choose the 'Ant Builder'. On the new window we choose the build-file which contains the example-code.Then switch to the 'Targets'-Tab. There we choose the enhance-target for the 'Auto-Build'. Now the enhancer-task will be run by Eclipse automatically. </p>
            <h3>Enhance Classes Using Maven</h3>
            <p>The next step is to run the enhancement step when compiling the source. You can do this by adding a small Ant task to your Maven file:</p>
            <div class="codesnippet" MadCap:conditions="">
                <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">&lt;</span><span style="color:#A31515;">plugin</span><span style="color:Blue;">&gt;</span>
    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">artifactId</span><span style="color:Blue;">&gt;</span>maven-antrun-plugin<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">artifactId</span><span style="color:Blue;">&gt;</span>
    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">version</span><span style="color:Blue;">&gt;</span>1.6<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">version</span><span style="color:Blue;">&gt;</span>
    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">dependencies</span><span style="color:Blue;">&gt;</span>
        <span style="color:Green;">&lt;!-- We need the db4o tooling for enhancing stuff --&gt;</span>
        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">dependency</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">groupId</span><span style="color:Blue;">&gt;</span>com.db4o<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">groupId</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">artifactId</span><span style="color:Blue;">&gt;</span>db4o-tools-java5<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">artifactId</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">version</span><span style="color:Blue;">&gt;</span>8.1-SNAPSHOT<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">version</span><span style="color:Blue;">&gt;</span>
        <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">dependency</span><span style="color:Blue;">&gt;</span>
    <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">dependencies</span><span style="color:Blue;">&gt;</span>
    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">executions</span><span style="color:Blue;">&gt;</span>
        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">execution</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">phase</span><span style="color:Blue;">&gt;</span>compile<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">phase</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">configuration</span><span style="color:Blue;">&gt;</span>
                <span style="color:Blue;">&lt;</span><span style="color:#A31515;">target</span><span style="color:Blue;">&gt;</span>
                    <span style="color:Green;">&lt;!-- We enhance with an additional Ant-run step. You can put this also in an extra file --&gt;</span>
                    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">typedef</span> <![CDATA[ ]]><span style="color:Red;">resource</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">instrumentation-def.properties</span><span style="color:Black;">"</span>
                             <span style="color:Red;">classpathref</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">maven.compile.classpath</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>

                    <span style="color:Green;">&lt;!-- We filter by our annotation --&gt;</span>
                    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">typedef</span> <![CDATA[ ]]><span style="color:Red;">name</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">annotation-filter</span><span style="color:Black;">"</span>
                             <span style="color:Red;">classname</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">com.db4odoc.tutorial.transparentpersistence.AnnotationFilter</span><span style="color:Black;">"</span>
                             <span style="color:Red;">classpathref</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">maven.compile.classpath</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>

                    <span style="color:Blue;">&lt;</span><span style="color:#A31515;">db4o-instrument</span> <![CDATA[ ]]><span style="color:Red;">classTargetDir</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">target/classes</span><span style="color:Black;">"</span><span style="color:Blue;">&gt;</span>
                        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">classpath</span> <![CDATA[ ]]><span style="color:Red;">refid</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">maven.compile.classpath</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>
                        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">sources</span> <![CDATA[ ]]><span style="color:Red;">dir</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">target/classes</span><span style="color:Black;">"</span><span style="color:Blue;">&gt;</span>
                            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">include</span> <![CDATA[ ]]><span style="color:Red;">name</span><span style="color:Blue;">=</span><span style="color:Black;">"</span><span style="color:Blue;">**/*.class</span><span style="color:Black;">"</span><span style="color:Blue;">/&gt;</span>
                        <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">sources</span><span style="color:Blue;">&gt;</span>

                        <span style="color:Blue;">&lt;</span><span style="color:#A31515;">transparent-activation-step</span><span style="color:Blue;">&gt;</span>
                            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">annotation-filter</span><span style="color:Blue;">/&gt;</span>
                        <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">transparent-activation-step</span><span style="color:Blue;">&gt;</span>
                    <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">db4o-instrument</span><span style="color:Blue;">&gt;</span>
                <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">target</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">configuration</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;</span><span style="color:#A31515;">goals</span><span style="color:Blue;">&gt;</span>
                <span style="color:Blue;">&lt;</span><span style="color:#A31515;">goal</span><span style="color:Blue;">&gt;</span>run<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">goal</span><span style="color:Blue;">&gt;</span>
            <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">goals</span><span style="color:Blue;">&gt;</span>
        <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">execution</span><span style="color:Blue;">&gt;</span>
    <span style="color:Blue;">&lt;/</span><span style="color:#A31515;">executions</span><span style="color:Blue;">&gt;</span>
<span style="color:Blue;">&lt;/</span><span style="color:#A31515;">plugin</span><span style="color:Blue;">&gt;</span></pre>
                <div class="codesnippet-meta">pom.xml: Enhance persisted classes during the build
			<div class="codedownload"><a href="CodeExamples/Example-java-db4o-tutorial-.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
            </div>
        </div>
        <h3>Check Enhancement</h3>
        <p>Finally we check if the enhancement actually worked. We just check if the classes implement the interface. If the interface is present everything worked. We can make this check a part of our test suite.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">if</span> (!Activatable.<span style="color:Blue;">class</span>.isAssignableFrom(Car.<span style="color:Blue;">class</span>)) {
    <span style="color:Blue;">throw</span> <![CDATA[ ]]><span style="color:Blue;">new</span> AssertionError(<span style="color:#A31515;">"Expect that the "</span> + Car.<span style="color:Blue;">class</span> + <span style="color:#A31515;">" implements "</span> + Activatable.<span style="color:Blue;">class</span>);
}</pre>
            <div class="codesnippet-meta">TransparentPersistence.java: Check for enhancement
			<div class="codedownload"><a href="CodeExamples/transparentpersistence/Example-tutorial-transparentpersistence-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="UsingIt"></a>Using Transparent Persistence</h2>
        <p>In order to use transparent persistence we need to configure it first:</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">final</span> EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
configuration.common().add(<span style="color:Blue;">new</span> TransparentPersistenceSupport(<span style="color:Blue;">new</span> DeactivatingRollbackStrategy()));
ObjectContainer container = Db4oEmbedded.openFile(configuration, DATABASE_FILE_NAME);</pre>
            <div class="codesnippet-meta">TransparentPersistence.java: Configure transparent persistence
			<div class="codedownload"><a href="CodeExamples/transparentpersistence/Example-tutorial-transparentpersistence-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>After that transparent persistence is active and manages the activation and updates for us.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Driver driver = queryForDriver(container);
<span style="color:Green;">// Transparent persistence will activate objects as needed</span>
System.out.println(<span style="color:#A31515;">"Is activated? "</span>+container.ext().isActive(driver));
String nameOfDriver = driver.getName();
System.out.println(<span style="color:#A31515;">"The name is "</span>+nameOfDriver);
System.out.println(<span style="color:#A31515;">"Is activated? "</span>+container.ext().isActive(driver));</pre>
            <div class="codesnippet-meta">TransparentPersistence.java: Transparent persistence manages activation
			<div class="codedownload"><a href="CodeExamples/transparentpersistence/Example-tutorial-transparentpersistence-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>Transparent persistence also manages updates. You just can change existing objects as you please. Later when you commit the transaction all updates are persisted. You don't need to store objects in order to update them. You only need to call store once for objects which are new and are not referenced by an existing object.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Driver driver = queryForDriver(container);
driver.getMostLovedCar().setCarName(<span style="color:#A31515;">"New name"</span>);
driver.setName(<span style="color:#A31515;">"John Turbo"</span>);
driver.addOwnedCar(<span style="color:Blue;">new</span> Car(<span style="color:#A31515;">"Volvo Combi"</span>));
<span style="color:Green;">// Just commit the transaction. All modified objects are stored</span>
container.commit();</pre>
            <div class="codesnippet-meta">TransparentPersistence.java: Just update and commit. Transparent persistence manages all updates
			<div class="codedownload"><a href="CodeExamples/transparentpersistence/Example-tutorial-transparentpersistence-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div id="footer" MadCap:conditions="Primary.Online">
            <p align="center">Do you have any questions, suggestions or feedback? 
			Ask your questions in the <a href="http://community.versant.com/Forums.aspx" target="_top">db4o forums</a>. 
			Join the <a href="http://community.versant.com" target="_top">db4o community</a> for additional resources and news.
			<br /><br /><a href="http://www.db4o.com/" target="_top">www.db4o.com</a></p>
        </div>
        <script src="Resources/Code/jquery.min.js">
        </script>
        <script src="Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */ 
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>