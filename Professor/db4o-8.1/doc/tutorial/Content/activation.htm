<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="3" MadCap:lastHeight="188" MadCap:lastWidth="625" MadCap:disableMasterStylesheet="true" MadCap:tocPath="" MadCap:InPreviewMode="false" MadCap:RuntimeFileType="Topic" MadCap:TargetType="WebHelp" MadCap:PathToHelpSystem="../" MadCap:HelpSystemFileName="index.xml" MadCap:SearchType="Stem">
    <head><title>Activation-Concept</title>
        <link href="SkinSupport/MadCap.css" rel="stylesheet" />
        <link href="Resources/Stylesheets/OnlineStyle.css" rel="stylesheet" />
        <script src="SkinSupport/MadCapAll.js">
        </script>
    </head>
    <body>
        <p class="MCWebHelpFramesetLink" style="display: none;"><a href="../index_CSH.html#activation.htm" style="">Open topic with navigation</a>
        </p>
        <div class="MCBreadcrumbsBox"><span class="MCBreadcrumbsPrefix">You are here: </span><span class="MCBreadcrumbs">Activation in Action</span>
        </div>
        <script type="text/javascript">/*<![CDATA[*/
			document.write("<a href=\"" + location.href +"\">");
			document.write("Direct Link");
			document.write('</a>');/*]]>*/</script>
        <h1>Activation-Concept</h1>
        <p>Activation is a mechanism which controls object instantiation. Why is this necessary? Let's look at an example. We store person-objects with its parents. Each person object has a reference to his parents, the parents again have references to their parents and so on and so forth. Now we load a person object from the database, what does db4o do? Does it load the person object, its parents and the parents of the parents? Then it probably loads all objects from the database and will use up all memory.</p>
        <p>
            <img src="without-activation.png" />
        </p>
        <p>Luckily db4o does not behave like this. When a query retrieves objects, their fields are loaded into memory (activated in db4o terms) only to a certain activation depth. In this case depth means "number of member references away from the original object". All the fields beyond the activation depth are set to null or to default values.So db4o does not load the whole object graph at once. Instead, db4o loads only the parts which we are interested in.</p>
        <p>
            <img src="with-activation_614x464.png" style="width: 614; height: 464;" />
        </p>
        <h2><a name="ActivationInAction"></a>Activation in Action</h2>
        <p>Let's see db4o's activation in action. To do so we need a deep object-graph. We create a person class with a mother-field and then create a deep hierarchy of people, for example a hierarchy of seven people. (<a href="javascript:void(0);" class="MCToggler" onclick="FMCToggler( this ); return false;" MadCap:targets="domainModel"><img style="border: none;margin-right: 5px;" src="SkinSupport/DropDownClosed.gif" MadCap:altsrc="SkinSupport/DropDownOpen.gif" class="MCTogglerIcon" onload="if ( typeof( FMCPreloadImage ) == 'function' ) { FMCPreloadImage( 'SkinSupport/DropDownOpen.gif' ); }" />Click here</a> to see the example domain model classes)</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java" MadCap:targetName="domainModel" style="display: none;">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">public</span> <![CDATA[ ]]><span style="color:Blue;">class</span> Person {
    <span style="color:Blue;">private</span> String name;
    <span style="color:Blue;">private</span> Person mother;

    <span style="color:Blue;">public</span> Person(String name, Person mother) {
        <span style="color:Blue;">this</span>.name = name;
        <span style="color:Blue;">this</span>.mother = mother;
    }

    <span style="color:Blue;">public</span> String getName() {
        <span style="color:Blue;">return</span> name;
    }

    <span style="color:Blue;">public</span> Person getMother() {
        <span style="color:Blue;">return</span> mother;
    }

    @Override
    <span style="color:Blue;">public</span> String toString() {
        <span style="color:Blue;">return</span> <![CDATA[ ]]><span style="color:#A31515;">"Person{"</span> +
                <span style="color:#A31515;">"name='"</span> + name +
                <span style="color:#A31515;">"'}"</span>;
    }
}</pre>
            <div class="codesnippet-meta">Person.java: Domain model for people
			<div class="codedownload"><a href="CodeExamples/activation/Example-tutorial-activation-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Person eva = <span style="color:Blue;">new</span> Person(<span style="color:#A31515;">"Eva"</span>,<span style="color:Blue;">null</span>);
Person julia = <span style="color:Blue;">new</span> Person(<span style="color:#A31515;">"Julia"</span>,eva);
Person jennifer = <span style="color:Blue;">new</span> Person(<span style="color:#A31515;">"Jennifer"</span>,julia);
Person jamie = <span style="color:Blue;">new</span> Person(<span style="color:#A31515;">"Jamie"</span>,jennifer);
Person jill = <span style="color:Blue;">new</span> Person(<span style="color:#A31515;">"Jill"</span>,jamie);
Person joanna = <span style="color:Blue;">new</span> Person(<span style="color:#A31515;">"Joanna"</span>,jill);

Person joelle = <span style="color:Blue;">new</span> Person(<span style="color:#A31515;">"Joelle"</span>,joanna);
container.store(joelle);</pre>
            <div class="codesnippet-meta">ActivationConcept.java: Store a deep object hierarchy
			<div class="codedownload"><a href="CodeExamples/activation/Example-tutorial-activation-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>After that we close the database, reopen it and query for a person. Then we start to traverse the object graph. At a certain point we will reach objects which aren't activated anymore. In those objects all fields are null or have the default value:</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">Person joelle = queryForJoelle(container);
Person jennifer = joelle.getMother().getMother().getMother().getMother();
System.out.println(<span style="color:#A31515;">"Is activated: "</span> + jennifer);
<span style="color:Green;">// Now we step across the activation boundary</span>
<span style="color:Green;">// therefore the next person isn't activate anymore.</span>
<span style="color:Green;">// That means all fields are set to null or default-value</span>
Person julia = jennifer.getMother();
System.out.println(<span style="color:#A31515;">"Isn't activated anymore"</span>+julia);</pre>
            <div class="codesnippet-meta">ActivationConcept.java: Activation depth in action
			<div class="codedownload"><a href="CodeExamples/activation/Example-tutorial-activation-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>Since not activate objects have set all their fields to null, they can cause null pointer exceptions:</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">String nameOfMother = julia.getMother().getName();</pre>
            <div class="codesnippet-meta">ActivationConcept.java: NullPointer exception due to not activated objects
			<div class="codedownload"><a href="CodeExamples/activation/Example-tutorial-activation-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h2><a name="DealWithActivation"></a>Deal with Activation</h2>
        <p>We've seen that activation can cause issues and we have to deal with it. There are different strategies for that.</p>
        <h3>Directly Activating Objects</h3>
        <p>We can explicitly activate objects or ask about their activation state. This way we can activate objects when needed. However as soon as we need to activate objects explicitly all over the place in our code we should look for alternatives.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">boolean</span> isActivated = container.ext().isActive(julia);</pre>
            <div class="codesnippet-meta">ActivationConcept.java: Check if an instance is activated
			<div class="codedownload"><a href="CodeExamples/activation/Example-tutorial-activation-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">container.activate(julia,5);</pre>
            <div class="codesnippet-meta">ActivationConcept.java: Activate instance to a depth of five
			<div class="codedownload"><a href="CodeExamples/activation/Example-tutorial-activation-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Changing Activation Depth</h3>
        <p>Alternatively we can increase the activation depth globally or for certain types. However we need to be aware that a high activation depth decreases performance. That's why we should be very careful with increasing the activation depth.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
configuration.common().activationDepth(10);
ObjectContainer container = Db4oEmbedded.openFile(configuration,DATABASE_FILE);</pre>
            <div class="codesnippet-meta">ActivationConcept.java: Increase the activation depth to 10
			<div class="codedownload"><a href="CodeExamples/activation/Example-tutorial-activation-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <p>We can even more fine tune the activation depth. However the fundamental issue is the same. When we increase the activation depth it will hurt performance.</p>
        <div class="codesnippet" MadCap:conditions="Primary.Java">
            <pre class="prettyprint" xml:space="preserve">EmbeddedConfiguration configuration = Db4oEmbedded.newConfiguration();
<span style="color:Green;">// At least activate persons to a depth of 10</span>
configuration.common().objectClass(Person.<span style="color:Blue;">class</span>).minimumActivationDepth(10);
<span style="color:Green;">// Or maybe we just want to activate all referenced objects</span>
configuration.common().objectClass(Person.<span style="color:Blue;">class</span>).cascadeOnActivate(<span style="color:Blue;">true</span>);</pre>
            <div class="codesnippet-meta">ActivationConcept.java: More activation options
			<div class="codedownload"><a href="CodeExamples/activation/Example-tutorial-activation-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a></div><div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div></div>
        </div>
        <h3>Transparent Activation / Persistence</h3>
        <p>The last option we have is transparent activation. Transparent activation takes care of all activation issues. It activates objects as soon as they are needed. To get transparent activation we need to enhance our classes at compile time. Read <a href="transparentpersistence.htm">this section of the tutorial</a> where we use transparent activation.</p>
        <div id="footer" MadCap:conditions="Primary.Online">
            <p align="center">Do you have any questions, suggestions or feedback? 
			Ask your questions in the <a href="http://community.versant.com/Forums.aspx" target="_top">db4o forums</a>. 
			Join the <a href="http://community.versant.com" target="_top">db4o community</a> for additional resources and news.
			<br /><br /><a href="http://www.db4o.com/" target="_top">www.db4o.com</a></p>
        </div>
        <script src="Resources/Code/jquery.min.js">
        </script>
        <script src="Resources/Code/ZeroClipboard.js">
        </script>
        <script type="text/javascript">/* <![CDATA[ */ 
window.onload = function(){
	var pathToFlash = $('html').attr('MadCap:PathToHelpSystem') + 'Content/Resources/Code/ZeroClipboard.swf';
	ZeroClipboard.setMoviePath(pathToFlash);
			
	function bindToClipBord(element,content){
		var clip = new ZeroClipboard.Client();
		clip.setText(content);
		clip.glue(element);
	};
		
	if(location.protocol==='file:'){
		$('.copylink-marker').remove();
	} else{
			$('.copylink-marker').each(function(){
				var text = $(this).parent().parent().children('.prettyprint').text();
				$(this).hover(function(){
					bindToClipBord(this,text);
				},
				function(){});
			});	
	}		
};
                /* ]]> */</script>
        <script type="text/javascript" src="SkinSupport/MadCapBodyEnd.js">
        </script>
    </body>
</html>